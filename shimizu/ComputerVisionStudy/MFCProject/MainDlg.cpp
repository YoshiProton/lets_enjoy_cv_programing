
// MainDlg.cpp : 実装ファイル
//

#include "stdafx.h"
#include "MFCProject.h"
#include "MainDlg.h"
#include "afxdialogex.h"

#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include "ImageProcessor.h"
#include "Original.h"
#include "Grayscale.h"
#include "Resize.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// アプリケーションのバージョン情報に使われる CAboutDlg ダイアログ

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// ダイアログ データ
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV サポート

// 実装
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CMainDlg ダイアログ



CMainDlg::CMainDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_MFCPROJECT_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CMainDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CMainDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_COMMAND(ID_MENU_EXIT, &CMainDlg::OnMenuExit)
	ON_COMMAND(ID_MENU_OPEN, &CMainDlg::OnMenuOpen)
	ON_COMMAND(ID_MENU_SAVE, &CMainDlg::OnMenuSave)
	ON_COMMAND(ID_MENU_ABOUT, &CMainDlg::OnMenuAbout)
	ON_COMMAND(ID_MENU_ORIGINAL, &CMainDlg::OnMenuOriginal)
	ON_COMMAND(ID_MENU_GRAYSCALE_FULLOCV, &CMainDlg::OnMenuGrayscaleFullOpenCV)
	ON_COMMAND(ID_MENU_GRAYSCALE_HALFOCV, &CMainDlg::OnMenuGrayscaleHalfOpenCV)
	ON_COMMAND(ID_MENU_GRAYSCALE_SCRATCH, &CMainDlg::OnMenuGrayscaleScratch)
	ON_COMMAND(ID_MENU_RESIZE_FULLOCV, &CMainDlg::OnMenuResizeFullOpenCV)
	ON_COMMAND(ID_MENU_RESIZE_HALFOCV, &CMainDlg::OnMenuResizeHalfOpenCV)
	ON_COMMAND(ID_MENU_RESIZE_SCRATCH, &CMainDlg::OnMenuResizeScratch)
END_MESSAGE_MAP()


// CMainDlg メッセージ ハンドラー

BOOL CMainDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// "バージョン情報..." メニューをシステム メニューに追加します。

	// IDM_ABOUTBOX は、システム コマンドの範囲内になければなりません。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// このダイアログのアイコンを設定します。アプリケーションのメイン ウィンドウがダイアログでない場合、
	//  Framework は、この設定を自動的に行います。
	SetIcon(m_hIcon, TRUE);			// 大きいアイコンの設定
	SetIcon(m_hIcon, FALSE);		// 小さいアイコンの設定

	// TODO: 初期化をここに追加します。
	filePath = "lena.jpg";

	return TRUE;  // フォーカスをコントロールに設定した場合を除き、TRUE を返します。
}

void CMainDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// ダイアログに最小化ボタンを追加する場合、アイコンを描画するための
//  下のコードが必要です。ドキュメント/ビュー モデルを使う MFC アプリケーションの場合、
//  これは、Framework によって自動的に設定されます。

void CMainDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 描画のデバイス コンテキスト

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// クライアントの四角形領域内の中央
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// アイコンの描画
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// ユーザーが最小化したウィンドウをドラッグしているときに表示するカーソルを取得するために、
//  システムがこの関数を呼び出します。
HCURSOR CMainDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

#pragma region 画像処理以外のメニュー選択イベント
void CMainDlg::OnMenuExit()
{
	OnOK();
	//OnCancel();
}

//ファイルを開くメニュー選択
void CMainDlg::OnMenuOpen()
{
	CBitmap bmp;
	CImage image;
	image.Load(_T("lena.jpg"));
	bmp.Attach(image.Detach());
	CStatic* pictbox = (CStatic*)GetDlgItem(IDC_STATIC_PICTURE);
	pictbox->SetBitmap(bmp);

	//配列に変換
	//http://killswitch5375.hatenablog.com/entry/20100601/p1
	//HBITMAP hBitmap = (HBITMAP)image;
	//GetBitmapBits(hBitmap, size, buff);
	//HDC hdc = image.GetDC();
	//image.ReleaseDC();
	image.Destroy();
}

//ファイルを保存メニュー選択
void CMainDlg::OnMenuSave()
{

}

//アバウトメニュ選択
void CMainDlg::OnMenuAbout()
{
	CAboutDlg dlgAbout;
	dlgAbout.DoModal();
}
#pragma endregion

#pragma region 画像処理メニュー選択イベント

#pragma region 元画像をそのまま表示
void CMainDlg::OnMenuOriginal()
{
	COriginal process;
	process.Execute(filePath);
}
#pragma endregion

#pragma region グレイスケール化
//OpenCVを活用して簡単実装
void CMainDlg::OnMenuGrayscaleFullOpenCV()
{
	CGrayscale process;
	process.SetProcessMethod(ProcessMethod::FullOpenCV);
	process.Execute(filePath);
}

//画像読み込み保存のみOpenCVを使用してピクセル操作はスクラッチ
void CMainDlg::OnMenuGrayscaleHalfOpenCV()
{
	CGrayscale process;
	process.SetProcessMethod(ProcessMethod::HalfOpenCV);
	process.Execute(filePath);
}

//OpenCVを全く使わずにフルスクラッチ
void CMainDlg::OnMenuGrayscaleScratch()
{
	CGrayscale process;
	process.SetProcessMethod(ProcessMethod::FullScratch);
	process.Execute(filePath);
}
#pragma endregion

#pragma region リサイズ
//OpenCVを活用して簡単実装
void CMainDlg::OnMenuResizeFullOpenCV()
{
	CResize process;
	process.SetProcessMethod(ProcessMethod::FullOpenCV);
	process.Execute(filePath);
}

//画像読み込み保存のみOpenCVを使用してピクセル操作はスクラッチ
void CMainDlg::OnMenuResizeHalfOpenCV()
{
	CResize process;
	process.SetProcessMethod(ProcessMethod::HalfOpenCV);
	process.Execute(filePath);
}

//OpenCVを全く使わずにフルスクラッチ
void CMainDlg::OnMenuResizeScratch()
{
	CResize process;
	process.SetProcessMethod(ProcessMethod::FullScratch);
	process.Execute(filePath);
}
#pragma endregion

#pragma endregion
